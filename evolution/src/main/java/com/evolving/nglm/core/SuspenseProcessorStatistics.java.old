/****************************************************************************
*
*  SuspenseProcessorStatistics.java
*
****************************************************************************/

package com.evolving.nglm.core;

import com.evolving.nglm.core.SuspenseAuditEntry.SuspenseProcessResolution;

import com.rii.utilities.SystemTime;

import java.util.Date;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


// Deprecated as SuspenseProcess not anymore used 
@Deprecated
public class SuspenseProcessorStatistics implements SuspenseProcessorStatisticsMBean, NGLMMonitoringObject
{
  //
  //  Base JMX object name
  //

  public static String BaseJMXObjectName = "com.evolving.nglm.core:type=SuspenseProcessor";

  //
  //  attributes
  //

  int totalEventCount;
  int successfulEventCount;
  int resubmittedEventCount;
  int failedEventCount;
  int abandonedEventCount;
  String objectNameForManagement;

  //
  //  logger
  //

  protected static final Logger log = LoggerFactory.getLogger(SuspenseProcessorStatistics.class);

  //
  // Interface: SuspenseProcessorStatisticsMBean
  //

  public int getTotalEventCount() { return totalEventCount; }
  public int getSuccessfulEventCount() { return successfulEventCount; }
  public int getResubmittedEventCount() { return resubmittedEventCount; }
  public int getFailedEventCount() { return failedEventCount; }
  public int getAbandonedEventCount() { return abandonedEventCount; }

  //
  // Interface: NGLMMonitoringObject
  //

  public String getObjectNameForManagement() { return objectNameForManagement; }

  /*****************************************
  *
  *  constructor
  *
  *****************************************/
  
  public SuspenseProcessorStatistics(String inputSource) throws ServerException
  {
    this.objectNameForManagement = BaseJMXObjectName + ",inputSource=" + inputSource;
    this.totalEventCount = 0;
    this.successfulEventCount = 0;
    this.failedEventCount = 0;
    this.resubmittedEventCount = 0;
    this.abandonedEventCount = 0;

    //
    // register
    //

    log.info("Registering MBEAN {}", this.objectNameForManagement);
    NGLMRuntime.registerMonitoringObject(this, true);
  }

  /*****************************************
  *
  *  updateStatistics
  *
  *****************************************/
      
  synchronized void updateStatistics(SuspenseProcessResolution resolution, int amount)
  {
    totalEventCount = totalEventCount + amount;
    switch (resolution)
      {
        case Success:
          successfulEventCount = successfulEventCount + amount;
          break;

        case Resubmitted:
          resubmittedEventCount = resubmittedEventCount + amount;
          break;

        case Failed:
          failedEventCount = failedEventCount + amount;
          break;
          
        case Abandoned:
          abandonedEventCount = abandonedEventCount + amount;
          break;
      }
  }

  /*****************************************
  *
  *  unregister
  *
  *****************************************/

  public void unregister()
  {
    NGLMRuntime.unregisterMonitoringObject(this);
  }
}
