<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.evolving.nglm</groupId>
  <artifactId>nglm-evolution-common-build</artifactId>
  <packaging>pom</packaging>
  <version>EVPRO_170_200320-SNAPSHOT</version>
  <name>evolution-common-build</name>

  <repositories> 

    <repository>
      <id>confluent</id>
      <name>Confluent Repository</name>
      <url>http://packages.confluent.io/maven/</url>
    </repository>

    <repository>
      <id>artifactory</id>
      <name>artifactory</name>
      <url>http://10.100.0.6:8090/artifactory/repo</url>
    </repository>

  </repositories>  

  <parent>
    <artifactId>nglm-core-common-build</artifactId>
    <groupId>com.evolving.nglm</groupId>
    <version>1.4.0-SNAPSHOT</version>
    <relativePath/>
  </parent>
  
  <properties>

    <!-- nglm versions -->
    <nglm.core.version>1.4.0-SNAPSHOT</nglm.core.version>
    <nglm.evolution.version>${project.version}</nglm.evolution.version>

    <!-- dependencies -->
    <flyway.version>qaveon-dnbo-2.5.0.10.4.6</flyway.version>
    <flyway.gui.version>1.0.39</flyway.gui.version>
    
    <!-- evolution-common-build -->
    <common.build.phase.generate-evolution-scripts>none</common.build.phase.generate-evolution-scripts>
    <common.build.phase.generate-evolution-partially-assembled-resources>none</common.build.phase.generate-evolution-partially-assembled-resources>
    <common.build.phase.generate-evolution-resources>none</common.build.phase.generate-evolution-resources>
    <common.build.phase.generate-prometheus-application-image>none</common.build.phase.generate-prometheus-application-image>
    <common.build.phase.generate-guimanager-image>none</common.build.phase.generate-guimanager-image>
    <common.build.phase.generate-thirdpartymanager-image>none</common.build.phase.generate-thirdpartymanager-image>
    <common.build.phase.generate-dnboproxy-image>none</common.build.phase.generate-dnboproxy-image>
    <common.build.phase.generate-evolutionengine-image>none</common.build.phase.generate-evolutionengine-image>
    <common.build.phase.generate-journeytrafficengine-image>none</common.build.phase.generate-journeytrafficengine-image>
    <common.build.phase.generate-propensityengine-image>none</common.build.phase.generate-propensityengine-image>
    <common.build.phase.generate-subscribergroup-image>none</common.build.phase.generate-subscribergroup-image>
    <common.build.phase.generate-storeconfiguration-image>none</common.build.phase.generate-storeconfiguration-image>
    <common.build.phase.generate-ucgengine-image>none</common.build.phase.generate-ucgengine-image>
    <common.build.phase.generate-infulfillmentmanager-image>none</common.build.phase.generate-infulfillmentmanager-image>
    <common.build.phase.generate-emptyfulfillmentmanager-image>none</common.build.phase.generate-emptyfulfillmentmanager-image>
    <common.build.phase.generate-commoditydeliverymanager-image>none</common.build.phase.generate-commoditydeliverymanager-image>
    <common.build.phase.generate-purchasefulfillmentmanager-image>none</common.build.phase.generate-purchasefulfillmentmanager-image>
    <common.build.phase.generate-notificationmanagersms-image>none</common.build.phase.generate-notificationmanagersms-image>
    <common.build.phase.generate-notificationmanagermail-image>none</common.build.phase.generate-notificationmanagermail-image>
    <common.build.phase.generate-notificationmanagerpush-image>none</common.build.phase.generate-notificationmanagerpush-image>
    <common.build.phase.generate-reportmanager-image>none</common.build.phase.generate-reportmanager-image>
    <common.build.phase.generate-reportscheduler-image>none</common.build.phase.generate-reportscheduler-image>
    <common.build.phase.generate-datacubemanager-image>none</common.build.phase.generate-datacubemanager-image>
    <common.build.phase.generate-upgrade-image>none</common.build.phase.generate-upgrade-image>
    <common.build.skip.docker-prometheus-application-image>true</common.build.skip.docker-prometheus-application-image>
    <common.build.skip.docker-guimanager-image>true</common.build.skip.docker-guimanager-image>
    <common.build.skip.docker-thirdpartymanager-image>true</common.build.skip.docker-thirdpartymanager-image>
    <common.build.skip.docker-dnboproxy-image>true</common.build.skip.docker-dnboproxy-image>
    <common.build.skip.docker-evolutionengine-image>true</common.build.skip.docker-evolutionengine-image>
    <common.build.skip.docker-journeytrafficengine-image>true</common.build.skip.docker-journeytrafficengine-image>
    <common.build.skip.docker-propensityengine-image>true</common.build.skip.docker-propensityengine-image>
    <common.build.skip.docker-subscribergroup-image>true</common.build.skip.docker-subscribergroup-image>
    <common.build.skip.docker-storeconfiguration-image>true</common.build.skip.docker-storeconfiguration-image>
    <common.build.skip.docker-ucgengine-image>true</common.build.skip.docker-ucgengine-image>
    <common.build.skip.docker-infulfillmentmanager-image>true</common.build.skip.docker-infulfillmentmanager-image>
    <common.build.skip.docker-emptyfulfillmentmanager-image>true</common.build.skip.docker-emptyfulfillmentmanager-image>
    <common.build.skip.docker-commoditydeliverymanager-image>true</common.build.skip.docker-commoditydeliverymanager-image>
    <common.build.skip.docker-purchasefulfillmentmanager-image>true</common.build.skip.docker-purchasefulfillmentmanager-image>
    <common.build.skip.docker-notificationmanagersms-image>true</common.build.skip.docker-notificationmanagersms-image>
    <common.build.skip.docker-notificationmanagermail-image>true</common.build.skip.docker-notificationmanagermail-image>
    <common.build.skip.docker-notificationmanagerpush-image>true</common.build.skip.docker-notificationmanagerpush-image>
    <common.build.skip.docker-reportmanager-image>true</common.build.skip.docker-reportmanager-image>
    <common.build.skip.docker-reportscheduler-image>true</common.build.skip.docker-reportscheduler-image>
    <common.build.skip.docker-datacubemanager-image>true</common.build.skip.docker-datacubemanager-image>
    <common.build.skip.docker-upgrade-image>true</common.build.skip.docker-upgrade-image>
    
    <!-- topics -->
    <topic.empty>empty</topic.empty>
    <topic.journey>journey</topic.journey>
    <topic.journeytemplate>journeytemplate</topic.journeytemplate>
    <topic.segmentationdimension>segmentation-dimension</topic.segmentationdimension>
    <topic.point>point</topic.point>
    <topic.offer>offer</topic.offer>
    <topic.report>report</topic.report>
    <topic.paymentMean>paymentMean</topic.paymentMean>
    <topic.presentationstrategy>presentationstrategy</topic.presentationstrategy>
    <topic.dnbomatrix>dnbomatrix</topic.dnbomatrix>
    <topic.dynamiceventdeclarations>dynamiceventdeclarations</topic.dynamiceventdeclarations>
    <topic.dynamiccriterionfield>dynamiccriterionfield</topic.dynamiccriterionfield>
    <topic.scoringstrategy>scoringstrategy</topic.scoringstrategy>
    <topic.callingchannel>callingchannel</topic.callingchannel>
    <topic.saleschannel>saleschannel</topic.saleschannel>
    <topic.supplier>supplier</topic.supplier>
    <topic.reseller>reseller</topic.reseller>
    <topic.product>product</topic.product>
    <topic.catalogcharacteristic>catalogcharacteristic</topic.catalogcharacteristic>
    <topic.contactpolicy>contactpolicy</topic.contactpolicy>
    <topic.journeyobjective>journeyobjective</topic.journeyobjective>
    <topic.offerobjective>offerobjective</topic.offerobjective>
    <topic.producttype>producttype</topic.producttype>
    <topic.ucgrule>ucgrule</topic.ucgrule>
    <topic.catalogobjective>catalogobjective</topic.catalogobjective>
    <topic.guiaudit>guiaudit</topic.guiaudit>
    <topic.deliverable>deliverable</topic.deliverable>
    <topic.tokentype>tokentype</topic.tokentype>
    <topic.vouchertype>vouchertype</topic.vouchertype>
    <topic.voucher>voucher</topic.voucher>
    <topic.template.subscribermessage>template-subscribermessage</topic.template.subscribermessage>
    <topic.subscribergroup>subscribergroup</topic.subscribergroup>
    <topic.subscribergroup.assignsubscriberid>subscribergroup-assignsubscriberid</topic.subscribergroup.assignsubscriberid>
    <topic.subscribergroupepoch>subscribergroupepoch</topic.subscribergroupepoch>
    <topic.ucgstate>ucgstate</topic.ucgstate>
    <topic.renamedprofilecriterionfield>renamedprofilecriterionfield</topic.renamedprofilecriterionfield>
    <topic.timedevaluation>timedevaluation</topic.timedevaluation>
    <topic.evaluatetargets>evaluatetargets</topic.evaluatetargets>
    <topic.periodicevaluation_fileconnector>periodicevaluation-fileconnector</topic.periodicevaluation_fileconnector>
    <topic.subscriberprofileforceupdate>subscriberprofileforceupdate</topic.subscriberprofileforceupdate>
    <topic.subscriberprofileforceupdate_fileconnector>subscriberprofileforceupdate-fileconnector</topic.subscriberprofileforceupdate_fileconnector>
    <topic.tokenredeemed>tokenredeemed</topic.tokenredeemed>
    <topic.tokenredeemed_fileconnector>tokenredeemed-fileconnector</topic.tokenredeemed_fileconnector>
    <topic.journeyrequest>journeyrequest</topic.journeyrequest>
    <topic.journeyresponse>journeyresponse</topic.journeyresponse>
    <topic.journeystatistic>journeystatistic</topic.journeystatistic>
    <topic.journeymetric>journeymetric</topic.journeymetric>
    <topic.loyaltyprogramrequest>loyaltyprogramrequest</topic.loyaltyprogramrequest>
    <topic.loyaltyprogramresponse>loyaltyprogramresponse</topic.loyaltyprogramresponse>
    <topic.deliverable.source>deliverable-source</topic.deliverable.source>
    <topic.externaldeliveryrequest_fileconnector>externaldeliveryrequest-fileconnector</topic.externaldeliveryrequest_fileconnector>
    <topic.presentationlog>presentationlog</topic.presentationlog>
    <topic.presentationlog_fileconnector>presentationlog-fileconnector</topic.presentationlog_fileconnector>
    <topic.acceptancelog>acceptancelog</topic.acceptancelog>
    <topic.acceptancelog_fileconnector>acceptancelog-fileconnector</topic.acceptancelog_fileconnector>
    <topic.tokenchange>tokenchange</topic.tokenchange>
    <topic.propensitylog>propensitylog</topic.propensitylog>
    <topic.profilechangeevent>profilechangeevent</topic.profilechangeevent>
    <topic.profilesegmentchangeevent>profilesegmentchangeevent</topic.profilesegmentchangeevent>
    <topic.profileloyaltyprogramchangeevent>profileloyaltyprogramchangeevent</topic.profileloyaltyprogramchangeevent>
    <topic.uploadedfile>uploadedfile</topic.uploadedfile>
    <topic.pointfulfillment.request>pointfulfillment-request</topic.pointfulfillment.request>
    <topic.pointfulfillment.response>pointfulfillment-response</topic.pointfulfillment.response>
    <topic.pointfulfillment.rekeyed>pointfulfillmentrequest-rekeyed</topic.pointfulfillment.rekeyed>
    <topic.propensityoutput>propensityoutput</topic.propensityoutput>
    <topic.journeytraffic>journeytraffic</topic.journeytraffic>
    <topic.target>target</topic.target>
    <topic.commoditydelivery.request>commoditydelivery-request</topic.commoditydelivery.request>
    <topic.commoditydelivery.response>commoditydelivery-response</topic.commoditydelivery.response>
    <topic.commoditydelivery.internal>commoditydelivery-internal</topic.commoditydelivery.internal>
    <topic.commoditydelivery.routing>commoditydelivery-routing</topic.commoditydelivery.routing>
    <topic.fulfillment.purchasefulfillment.request>purchasefulfillment-request</topic.fulfillment.purchasefulfillment.request>
    <topic.fulfillment.purchasefulfillment.response>purchasefulfillment-response</topic.fulfillment.purchasefulfillment.response>
    <topic.fulfillment.purchasefulfillment.internal>purchasefulfillment-internal</topic.fulfillment.purchasefulfillment.internal>
    <topic.fulfillment.purchasefulfillment.routing>purchasefulfillment-routing</topic.fulfillment.purchasefulfillment.routing>
    <topic.notificationmanagersms.request>notificationmanagersms-request</topic.notificationmanagersms.request>
    <topic.notificationmanagersms.response>notificationmanagersms-response</topic.notificationmanagersms.response>
    <topic.notificationmanagersms.internal>notificationmanagersms-internal</topic.notificationmanagersms.internal>
    <topic.notificationmanagersms.routing>notificationmanagersms-routing</topic.notificationmanagersms.routing>
    <topic.notificationmanagermail.request>notificationmanagermail-request</topic.notificationmanagermail.request>
    <topic.notificationmanagermail.response>notificationmanagermail-response</topic.notificationmanagermail.response>
    <topic.notificationmanagermail.internal>notificationmanagermail-internal</topic.notificationmanagermail.internal>
    <topic.notificationmanagermail.routing>notificationmanagermail-routing</topic.notificationmanagermail.routing>
    <topic.notificationmanagerpush.request>notificationmanagerpush-request</topic.notificationmanagerpush.request>
    <topic.notificationmanagerpush.response>notificationmanagerpush-response</topic.notificationmanagerpush.response>
    <topic.notificationmanagerpush.internal>notificationmanagerpush-internal</topic.notificationmanagerpush.internal>
    <topic.notificationmanagerpush.routing>notificationmanagerpush-routing</topic.notificationmanagerpush.routing>
    <topic.communicationchannel>communicationchannel</topic.communicationchannel>
    <topic.blackoutperiod>blackoutperiod</topic.blackoutperiod>
    <topic.loyaltyprogram>loyaltyprogram</topic.loyaltyprogram>
    <topic.exclusioninclusiontarget>exclusioninclusiontarget</topic.exclusioninclusiontarget>
    <topic.segmentcontactpolicy>segmentcontactpolicy</topic.segmentcontactpolicy>
    <topic.criterionfieldavailablevalues>criterionfieldavailablevalues</topic.criterionfieldavailablevalues>
    <topic.sourceaddress>sourceaddress</topic.sourceaddress>
    <topic.voucherchange.request>voucherchange-request</topic.voucherchange.request>
    <topic.voucherchange.response>voucherchange-response</topic.voucherchange.response>

    <!-- evolutionengine -->
    <changelog.evolutionengine.subscriberstate>subscriberstate</changelog.evolutionengine.subscriberstate>
    <changelog.evolutionengine.subscriberstate.topic>streams-evolutionengine-${changelog.evolutionengine.subscriberstate}-changelog</changelog.evolutionengine.subscriberstate.topic>
    <changelog.evolutionengine.extendedsubscriberprofile>extendedsubscriberprofile</changelog.evolutionengine.extendedsubscriberprofile>
    <changelog.evolutionengine.extendedsubscriberprofile.topic>streams-evolutionengine-${changelog.evolutionengine.extendedsubscriberprofile}-changelog</changelog.evolutionengine.extendedsubscriberprofile.topic>
    <changelog.evolutionengine.subscriberhistory>subscriberhistory</changelog.evolutionengine.subscriberhistory>
    <changelog.evolutionengine.subscriberhistory.topic>streams-evolutionengine-${changelog.evolutionengine.subscriberhistory}-changelog</changelog.evolutionengine.subscriberhistory.topic>

    <!-- journeytrafficengine -->
    <changelog.journeytrafficengine.journeytraffic>journeytraffic</changelog.journeytrafficengine.journeytraffic>
    <changelog.journeytrafficengine.journeytraffic.topic>streams-journeytrafficengine-${changelog.journeytrafficengine.journeytraffic}-changelog</changelog.journeytrafficengine.journeytraffic.topic>
    
    <!-- propensityengine -->
    <changelog.propensityengine.propensitystate>propensitystate</changelog.propensityengine.propensitystate>
    <changelog.propensityengine.propensitystate.topic>streams-propensityengine-${changelog.propensityengine.propensitystate}-changelog</changelog.propensityengine.propensitystate.topic>
    
    <!-- gui -->
    <gui.csr.display>true</gui.csr.display>
    <gui.opc.display>true</gui.opc.display>
    <gui.opc.dnbo.display>false</gui.opc.dnbo.display>
    <gui.jmr.display>true</gui.jmr.display>
    <gui.iar.display>true</gui.iar.display>
    <gui.opr.display>true</gui.opr.display>
    <gui.stg.display>true</gui.stg.display>
    <gui.sbm.display>true</gui.sbm.display>
    <gui.itm.display>false</gui.itm.display>
    <gui.lpm.display>true</gui.lpm.display>

  </properties>

  <dependencies>

    <dependency>
      <groupId>com.evolving.nglm</groupId>
      <artifactId>nglm-evolution</artifactId>
      <version>${nglm.evolution.version}</version>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpcore</artifactId>
      <version>4.4.5</version>
    </dependency>

    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpclient</artifactId>
      <version>4.5.6</version>
    </dependency>

  </dependencies>

  <build>

    <plugins>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>3.0.1</version>
        <executions>
          <execution>
            <id>unpack-nglm-evolution-resources</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>unpack-dependencies</goal>
            </goals>
            <configuration>
              <includeGroupIds>com.evolving.nglm</includeGroupIds>
              <includeArtifactIds>nglm-evolution</includeArtifactIds>
              <excludeTransitive>true</excludeTransitive>
              <overWrite>true</overWrite>
              <outputDirectory>${project.build.directory}/nglm-evolution-resources</outputDirectory>
              <excludes>com/**,META-INF/**</excludes>
              <overWriteReleases>true</overWriteReleases>
              <overWriteSnapshots>true</overWriteSnapshots>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>1.8</version>
        <executions>
          <execution>
            <id>generate-evolution-scripts</id>
            <phase>${common.build.phase.generate-evolution-scripts}</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <exportAntProperties>true</exportAntProperties>
              <target>
                <concat destfile="${project.build.directory}/assembled-resources/bin/prometheus-application-run.sh" force="yes">
                  <fileset dir="${project.build.directory}/nglm-evolution-resources/bin" includes="prometheus-application-run-preamble.sh"/>
                  <fileset dir="${project.build.directory}/partially-assembled-resources/bin" includes="*-prometheus-application-run.sh"/>
                  <fileset dir="${project.basedir}/src/assembly/resources/bin" includes="deployment-prometheus-application-run.sh"/>
                  <fileset dir="${project.build.directory}/nglm-evolution-resources/bin" includes="prometheus-application-run-postamble.sh"/>
                </concat>
                <concat destfile="${project.build.directory}/assembled-resources/config/prometheus-application.yml" force="yes">
                  <fileset dir="${project.build.directory}/nglm-evolution-resources/config" includes="evolution-prometheus-application.yml"/>
                  <fileset dir="${project.build.directory}/partially-assembled-resources/config" includes="*-prometheus-application.yml"/>
                  <fileset dir="${project.basedir}/src/assembly/resources/config" includes="deployment-prometheus-application.yml"/>
                </concat>
                <concat destfile="${project.build.directory}/assembled-resources/docker/prometheus-application.yml" force="yes">
                  <fileset dir="${project.build.directory}/nglm-evolution-resources/docker" includes="prometheus-application-preamble.yml"/>
                  <fileset dir="${project.build.directory}/partially-assembled-resources/docker" includes="*-prometheus-application-environment.yml"/>
                  <fileset dir="${project.basedir}/src/assembly/resources/docker" includes="prometheus-application-environment.yml"/>
                  <fileset dir="${project.build.directory}/nglm-evolution-resources/docker" includes="prometheus-application-postamble.yml"/>
                </concat>
                <concat destfile="${project.build.directory}/assembled-resources/bin/upgrade-run.sh" force="yes">
                  <fileset dir="${project.build.directory}/nglm-evolution-resources/bin" includes="upgrade-run-preamble.sh"/>
                  <fileset dir="${project.build.directory}/nglm-evolution-resources/bin" includes="upgrade-run-flyway.sh"/>
                  <fileset dir="${project.build.directory}/partially-assembled-resources/bin" includes="upgrade-run-*.sh"/>
                  <fileset dir="${project.basedir}/src/assembly/resources/bin" includes="upgrade-run-*.sh"/>
                  <fileset dir="${project.build.directory}/nglm-evolution-resources/bin" includes="upgrade-run-postamble.sh"/>
                </concat>
                <concat destfile="${project.build.directory}/assembled-resources/docker/upgrade.yml" force="yes">
                  <fileset dir="${project.build.directory}/nglm-evolution-resources/docker" includes="upgrade-preamble.yml"/>
                  <fileset dir="${project.build.directory}/partially-assembled-resources/docker" includes="*-upgrade-environment.yml"/>
                  <fileset dir="${project.basedir}/src/assembly/resources/docker" includes="upgrade-environment.yml"/>
                  <fileset dir="${project.build.directory}/nglm-evolution-resources/docker" includes="upgrade-postamble.yml"/>
                </concat>
                <copy todir="${project.build.directory}/assembled-resources/config">
                  <fileset dir="${project.build.directory}/nglm-evolution-resources/config">
                    <include name="deployment-*.json"/>
                  </fileset>
                </copy>
                <replaceregexp match="(--.*$)|${line.separator}" replace="" flags="gm">
                  <fileset dir="${project.build.directory}/assembled-resources/config" includes="deployment*.json"/>
                </replaceregexp>
                <copy todir="${project.build.directory}/assembled-resources/docker">
                  <fileset dir="${project.build.directory}/nglm-evolution-resources/docker">
                    <include name="*.yml"/>
                    <exclude name="prometheus-application-preamble.yml"/>
                    <exclude name="prometheus-application-postamble.yml"/>
                    <exclude name="upgrade-preamble.yml"/>
                    <exclude name="upgrade-postamble.yml"/>
                  </fileset>
                </copy>
              </target>
            </configuration>
          </execution>
        </executions>
      </plugin>
      
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <version>3.0.2</version>
        <executions>

          <execution>
            <id>generate-evolution-assembled-resources</id>
            <phase>validate</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/assembled-resources</outputDirectory>
              <resources>          
                <resource>
                  <directory>src/assembly/resources</directory>
                  <includes>
                    <include>license/licenseToken.bin</include>
                    <include>databases/*</include>
                  </includes>
                  <filtering>false</filtering>
                </resource>
              </resources>              
            </configuration>            
          </execution>

          <execution>
            <id>generate-evolution-partially-assembled-resources</id>
            <phase>${common.build.phase.generate-evolution-partially-assembled-resources}</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/partially-assembled-resources</outputDirectory>
              <resources>     
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources</directory>
                  <includes>
                    <include>bin/*</include>
                    <include>config/log4j-evolution.properties</include>
                    <include>docker/*.yml</include>
                    <include>docker/connect/*</include>
                    <include>docker/setup/*</include>
                    <include>docker/analyse-upgrade/*</include>
                    <include>support/*</include>
                  </includes>
                  <excludes>
                    <exclude>bin/upgrade-*.sh</exclude>
                  </excludes>
                  <filtering>true</filtering>
                </resource>
              </resources>     
            </configuration>     
          </execution>

          <execution>
            <id>generate-prometheus-application-docker-stack</id>
            <phase>${common.build.phase.generate-prometheus-application-image}</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/assembled-docker/prometheus-application</outputDirectory>
              <resources>          
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources/docker/prometheus-application</directory>
                  <includes>
                    <include>Dockerfile</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/assembled-resources</directory>
                  <includes>
                    <include>config/prometheus-application.yml</include>
                    <include>bin/prometheus-application-run.sh</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>src/assembly/resources</directory>
                  <includes>
                    <include>config/prometheus-application-alert.rules</include>
                  </includes>
                  <filtering>false</filtering>
                </resource>
              </resources>              
            </configuration>            
          </execution>
          
          <execution>
            <id>generate-guimanager-docker-stack</id>
            <phase>${common.build.phase.generate-guimanager-image}</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/assembled-docker/guimanager</outputDirectory>
              <resources>          
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources/docker/guimanager</directory>
                  <includes>
                    <include>Dockerfile</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources</directory>
                  <includes>
                    <include>bin/guimanager-run.sh</include>
                    <include>config/guimanager_jmx.yml</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-core-resources</directory>
                  <includes>
                    <include>bin/ev-cub</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/assembled-resources</directory>
                  <includes>
                    <include>config/log4j-evol.properties</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}</directory>
                  <includes>
                    <include>lib/*.jar</include>
                    <include>${project.artifactId}-${project.version}.jar</include>
                  </includes>
                  <filtering>false</filtering>
                </resource>
              </resources>              
            </configuration>            
          </execution>
	
	  <execution>
            <id>generate-thirdpartymanager-docker-stack</id>
            <phase>${common.build.phase.generate-thirdpartymanager-image}</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/assembled-docker/thirdpartymanager</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources/docker/thirdpartymanager</directory>
                  <includes>
                    <include>Dockerfile</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources</directory>
                  <includes>
                    <include>bin/thirdpartymanager-run.sh</include>
                    <include>config/thirdpartymanager_jmx.yml</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-core-resources</directory>
                  <includes>
                    <include>bin/ev-cub</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/assembled-resources</directory>
                  <includes>
                    <include>config/log4j-evol.properties</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}</directory>
                  <includes>
                    <include>lib/*.jar</include>
                    <include>${project.artifactId}-${project.version}.jar</include>
                  </includes>
                  <filtering>false</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>

	  <execution>
            <id>generate-dnboproxy-docker-stack</id>
            <phase>${common.build.phase.generate-dnboproxy-image}</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/assembled-docker/dnboproxy</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources/docker/dnboproxy</directory>
                  <includes>
                    <include>Dockerfile</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources</directory>
                  <includes>
                    <include>bin/dnboproxy-run.sh</include>
                    <include>config/dnboproxy_jmx.yml</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-core-resources</directory>
                  <includes>
                    <include>bin/ev-cub</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/assembled-resources</directory>
                  <includes>
                    <include>config/log4j-evol.properties</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}</directory>
                  <includes>
                    <include>lib/*.jar</include>
                    <include>${project.artifactId}-${project.version}.jar</include>
                  </includes>
                  <filtering>false</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <id>generate-evolutionengine-docker-stack</id>
            <phase>${common.build.phase.generate-evolutionengine-image}</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/assembled-docker/evolutionengine</outputDirectory>
              <resources>          
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources/docker/evolutionengine</directory>
                  <includes>
                    <include>Dockerfile</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources</directory>
                  <includes>
                    <include>bin/evolutionengine-run.sh</include>
                    <include>config/evolutionengine_jmx.yml</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-core-resources</directory>
                  <includes>
                    <include>bin/ev-cub</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/assembled-resources</directory>
                  <includes>
                    <include>config/log4j-evol.properties</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}</directory>
                  <includes>
                    <include>lib/*.jar</include>
                    <include>${project.artifactId}-${project.version}.jar</include>
                  </includes>
                  <filtering>false</filtering>
                </resource>
              </resources>              
            </configuration>            
          </execution>
          
          <execution>
            <id>generate-journeytrafficengine-docker-stack</id>
            <phase>${common.build.phase.generate-journeytrafficengine-image}</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/assembled-docker/journeytrafficengine</outputDirectory>
              <resources>          
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources/docker/journeytrafficengine</directory>
                  <includes>
                    <include>Dockerfile</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources</directory>
                  <includes>
                    <include>bin/journeytrafficengine-run.sh</include>
                    <include>config/journeytrafficengine_jmx.yml</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-core-resources</directory>
                  <includes>
                    <include>bin/ev-cub</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/assembled-resources</directory>
                  <includes>
                    <include>config/log4j-evol.properties</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}</directory>
                  <includes>
                    <include>lib/*.jar</include>
                    <include>${project.artifactId}-${project.version}.jar</include>
                  </includes>
                  <filtering>false</filtering>
                </resource>
              </resources>              
            </configuration>            
          </execution>
          
          <execution>
            <id>generate-propensityengine-docker-stack</id>
            <phase>${common.build.phase.generate-propensityengine-image}</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/assembled-docker/propensityengine</outputDirectory>
              <resources>          
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources/docker/propensityengine</directory>
                  <includes>
                    <include>Dockerfile</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources</directory>
                  <includes>
                    <include>bin/propensityengine-run.sh</include>
                    <include>config/propensityengine_jmx.yml</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-core-resources</directory>
                  <includes>
                    <include>bin/ev-cub</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/assembled-resources</directory>
                  <includes>
                    <include>config/log4j-evol.properties</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}</directory>
                  <includes>
                    <include>lib/*.jar</include>
                    <include>${project.artifactId}-${project.version}.jar</include>
                  </includes>
                  <filtering>false</filtering>
                </resource>
              </resources>              
            </configuration>            
          </execution>
          
          <execution>
            <id>generate-subscribergroup-stack</id>
            <phase>${common.build.phase.generate-subscribergroup-image}</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/assembled-docker/subscribergroup</outputDirectory>
              <resources>          
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources/docker/subscribergroup</directory>
                  <includes>
                    <include>Dockerfile</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources</directory>
                  <includes>
                    <include>bin/subscribergroup-run.sh</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/assembled-resources</directory>
                  <includes>
                    <include>config/log4j-evol.properties</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}</directory>
                  <includes>
                    <include>lib/*.jar</include>
                    <include>${project.artifactId}-${project.version}.jar</include>
                  </includes>
                  <filtering>false</filtering>
                </resource>
              </resources>              
            </configuration>            
          </execution>

          <execution>
            <id>generate-storeconfiguration-stack</id>
            <phase>${common.build.phase.generate-storeconfiguration-image}</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/assembled-docker/storeconfiguration</outputDirectory>
              <resources>          
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources/docker/storeconfiguration</directory>
                  <includes>
                    <include>Dockerfile</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources</directory>
                  <includes>
                    <include>bin/storeconfiguration-run.sh</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/assembled-resources</directory>
                  <includes>
                    <include>config/log4j-evol.properties</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}</directory>
                  <includes>
                    <include>lib/*.jar</include>
                    <include>${project.artifactId}-${project.version}.jar</include>
                  </includes>
                  <filtering>false</filtering>
                </resource>
              </resources>              
            </configuration>            
          </execution>

          <execution>
            <id>generate-ucgengine-docker-stack</id>
            <phase>${common.build.phase.generate-ucgengine-image}</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/assembled-docker/ucgengine</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources/docker/ucgengine</directory>
                  <includes>
                    <include>Dockerfile</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources</directory>
                  <includes>
                    <include>bin/ucgengine-run.sh</include>
                    <include>config/ucgengine_jmx.yml</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-core-resources</directory>
                  <includes>
                    <include>bin/ev-cub</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/assembled-resources</directory>
                  <includes>
                    <include>config/log4j-evol.properties</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}</directory>
                  <includes>
                    <include>lib/*.jar</include>
                    <include>${project.artifactId}-${project.version}.jar</include>
                  </includes>
                  <filtering>false</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <id>generate-infulfillmentmanager-docker-stack</id>
            <phase>${common.build.phase.generate-infulfillmentmanager-image}</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/assembled-docker/infulfillmentmanager</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources/docker/infulfillmentmanager</directory>
                  <includes>
                    <include>Dockerfile</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources</directory>
                  <includes>
                    <include>bin/infulfillmentmanager-run.sh</include>
                    <include>config/infulfillmentmanager_jmx.yml</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-core-resources</directory>
                  <includes>
                    <include>bin/ev-cub</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/assembled-resources</directory>
                  <includes>
                    <include>config/log4j-evol.properties</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}</directory>
                  <includes>
                    <include>lib/*.jar</include>
                    <include>${project.artifactId}-${project.version}.jar</include>
                  </includes>
                  <filtering>false</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <id>generate-emptyfulfillmentmanager-docker-stack</id>
            <phase>${common.build.phase.generate-emptyfulfillmentmanager-image}</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/assembled-docker/emptyfulfillmentmanager</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources/docker/emptyfulfillmentmanager</directory>
                  <includes>
                    <include>Dockerfile</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources</directory>
                  <includes>
                    <include>bin/emptyfulfillmentmanager-run.sh</include>
                    <include>config/emptyfulfillmentmanager_jmx.yml</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-core-resources</directory>
                  <includes>
                    <include>bin/ev-cub</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/assembled-resources</directory>
                  <includes>
                    <include>config/log4j-evol.properties</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}</directory>
                  <includes>
                    <include>lib/*.jar</include>
                    <include>${project.artifactId}-${project.version}.jar</include>
                  </includes>
                  <filtering>false</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <id>generate-commoditydeliverymanager-docker-stack</id>
            <phase>${common.build.phase.generate-commoditydeliverymanager-image}</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/assembled-docker/commoditydeliverymanager</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources/docker/commoditydeliverymanager</directory>
                  <includes>
                    <include>Dockerfile</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources</directory>
                  <includes>
                    <include>bin/commoditydeliverymanager-run.sh</include>
                    <include>config/commoditydeliverymanager_jmx.yml</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-core-resources</directory>
                  <includes>
                    <include>bin/ev-cub</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/assembled-resources</directory>
                  <includes>
                    <include>config/log4j-evol.properties</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}</directory>
                  <includes>
                    <include>lib/*.jar</include>
                    <include>${project.artifactId}-${project.version}.jar</include>
                  </includes>
                  <filtering>false</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <id>generate-purchasefulfillmentmanager-docker-stack</id>
            <phase>${common.build.phase.generate-purchasefulfillmentmanager-image}</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/assembled-docker/purchasefulfillmentmanager</outputDirectory>
              <resources>          
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources/docker/purchasefulfillmentmanager</directory>
                  <includes>
                    <include>Dockerfile</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources</directory>
                  <includes>
                    <include>bin/purchasefulfillmentmanager-run.sh</include>
                    <include>config/purchasefulfillmentmanager_jmx.yml</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-core-resources</directory>
                  <includes>
                    <include>bin/ev-cub</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/assembled-resources</directory>
                  <includes>
                    <include>config/log4j-evol.properties</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}</directory>
                  <includes>
                    <include>lib/*.jar</include>
                    <include>${project.artifactId}-${project.version}.jar</include>
                  </includes>
                  <filtering>false</filtering>
                </resource>
              </resources>              
            </configuration>            
          </execution>

          <execution>
            <id>generate-notificationmanagersms-docker-stack</id>
            <phase>${common.build.phase.generate-notificationmanagersms-image}</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/assembled-docker/notificationmanagersms</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources/docker/notificationmanagersms</directory>
                  <includes>
                    <include>Dockerfile</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources</directory>
                  <includes>
                    <include>bin/notificationmanagersms-run.sh</include>
                    <include>config/notificationmanagersms_jmx.yml</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-core-resources</directory>
                  <includes>
                    <include>bin/ev-cub</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/assembled-resources</directory>
                  <includes>
                    <include>config/log4j-evol.properties</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}</directory>
                  <includes>
                    <include>lib/*.jar</include>
                    <include>${project.artifactId}-${project.version}.jar</include>
                  </includes>
                  <filtering>false</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <id>generate-notificationmanagermail-docker-stack</id>
            <phase>${common.build.phase.generate-notificationmanagermail-image}</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/assembled-docker/notificationmanagermail</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources/docker/notificationmanagermail</directory>
                  <includes>
                    <include>Dockerfile</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources</directory>
                  <includes>
                    <include>bin/notificationmanagermail-run.sh</include>
                    <include>config/notificationmanagermail_jmx.yml</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-core-resources</directory>
                  <includes>
                    <include>bin/ev-cub</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/assembled-resources</directory>
                  <includes>
                    <include>config/log4j-evol.properties</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}</directory>
                  <includes>
                    <include>lib/*.jar</include>
                    <include>${project.artifactId}-${project.version}.jar</include>
                  </includes>
                  <filtering>false</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <id>generate-notificationmanagerpush-docker-stack</id>
            <phase>${common.build.phase.generate-notificationmanagerpush-image}</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/assembled-docker/notificationmanagerpush</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources/docker/notificationmanagerpush</directory>
                  <includes>
                    <include>Dockerfile</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources</directory>
                  <includes>
                    <include>bin/notificationmanagerpush-run.sh</include>
                    <include>config/notificationmanagerpush_jmx.yml</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-core-resources</directory>
                  <includes>
                    <include>bin/ev-cub</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/assembled-resources</directory>
                  <includes>
                    <include>config/log4j-evol.properties</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}</directory>
                  <includes>
                    <include>lib/*.jar</include>
                    <include>${project.artifactId}-${project.version}.jar</include>
                  </includes>
                  <filtering>false</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <id>generate-reportmanager-docker-stack</id>
            <phase>${common.build.phase.generate-reportmanager-image}</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/assembled-docker/reportmanager</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources/docker/reportmanager</directory>
                  <includes>
                    <include>Dockerfile</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources</directory>
                  <includes>
                    <include>bin/reportmanager-run.sh</include>
                    <include>config/reportmanager_jmx.yml</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-core-resources</directory>
                  <includes>
                    <include>bin/ev-cub</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/assembled-resources</directory>
                  <includes>
                    <include>config/log4j-evol.properties</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}</directory>
                  <includes>
                    <include>lib/*.jar</include>
                    <include>${project.artifactId}-${project.version}.jar</include>
                  </includes>
                  <filtering>false</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <id>generate-reportscheduler-docker-stack</id>
            <phase>${common.build.phase.generate-reportscheduler-image}</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/assembled-docker/reportscheduler</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources/docker/reportscheduler</directory>
                  <includes>
                    <include>Dockerfile</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources</directory>
                  <includes>
                    <include>bin/reportscheduler-run.sh</include>
                    <include>config/reportscheduler_jmx.yml</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-core-resources</directory>
                  <includes>
                    <include>bin/ev-cub</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/assembled-resources</directory>
                  <includes>
                    <include>config/log4j-evol.properties</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}</directory>
                  <includes>
                    <include>lib/*.jar</include>
                    <include>${project.artifactId}-${project.version}.jar</include>
                  </includes>
                  <filtering>false</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <id>generate-datacubemanager-docker-stack</id>
            <phase>${common.build.phase.generate-datacubemanager-image}</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/assembled-docker/datacubemanager</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources/docker/datacubemanager</directory>
                  <includes>
                    <include>Dockerfile</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources</directory>
                  <includes>
                    <include>bin/datacubemanager-run.sh</include>
                    <include>config/datacubemanager_jmx.yml</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-core-resources</directory>
                  <includes>
                    <include>bin/ev-cub</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/assembled-resources</directory>
                  <includes>
                    <include>config/log4j-evol.properties</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}</directory>
                  <includes>
                    <include>lib/*.jar</include>
                    <include>${project.artifactId}-${project.version}.jar</include>
                  </includes>
                  <filtering>false</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <id>generate-upgrade-stack</id>
            <phase>${common.build.phase.generate-upgrade-image}</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/assembled-docker/upgrade</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources/docker/upgrade</directory>
                  <includes>
                    <include>Dockerfile</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/assembled-resources</directory>
                  <includes>
                    <include>bin/upgrade-run.sh</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/nglm-evolution-resources</directory>
                  <includes>
                    <include>databases/</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/assembled-resources</directory>
                  <includes>
                    <include>databases/</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>src/assembly/resources</directory>
                  <includes>
                    <include>databases/</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>

        </executions>
      </plugin>

      <plugin>
        <groupId>com.spotify</groupId>
        <artifactId>dockerfile-maven-plugin</artifactId>
        <version>${dockerfile.maven.plugin.version}</version>
        <executions>

          <execution>
            <id>docker-prometheus-application</id>
            <goals>
              <goal>build</goal>
              <goal>push</goal>
            </goals>
            <configuration>
              <skip>${common.build.skip.docker-prometheus-application-image}</skip>
              <contextDirectory>${project.build.directory}/assembled-docker/prometheus-application</contextDirectory>
              <repository>${env.DOCKER_REGISTRY}ev-prometheus-application</repository>
              <classifier>docker-info-prometheus-application</classifier>
              <tag>${project.name}-${project.version}</tag>
            </configuration>
          </execution>

          <execution>
            <id>docker-guimanager</id>
            <goals>
              <goal>build</goal>
              <goal>push</goal>
            </goals>
            <configuration>
              <skip>${common.build.skip.docker-guimanager-image}</skip>
              <contextDirectory>${project.build.directory}/assembled-docker/guimanager</contextDirectory>
              <repository>${env.DOCKER_REGISTRY}ev-guimanager</repository>
              <classifier>docker-info-guimanager</classifier>
              <tag>${project.name}-${project.version}</tag>
            </configuration>
          </execution>

          <execution>
            <id>docker-thirdpartymanager</id>
            <goals>
              <goal>build</goal>
              <goal>push</goal>
            </goals>
            <configuration>
              <skip>${common.build.skip.docker-thirdpartymanager-image}</skip>
              <contextDirectory>${project.build.directory}/assembled-docker/thirdpartymanager</contextDirectory>
              <repository>${env.DOCKER_REGISTRY}ev-thirdpartymanager</repository>
              <classifier>docker-info-thirdpartymanager</classifier>
              <tag>${project.name}-${project.version}</tag>
            </configuration>
          </execution>

          <execution>
            <id>docker-dnboproxy</id>
            <goals>
              <goal>build</goal>
              <goal>push</goal>
            </goals>
            <configuration>
              <skip>${common.build.skip.docker-dnboproxy-image}</skip>
              <contextDirectory>${project.build.directory}/assembled-docker/dnboproxy</contextDirectory>
              <repository>${env.DOCKER_REGISTRY}ev-dnboproxy</repository>
              <classifier>docker-info-dnboproxy</classifier>
              <tag>${project.name}-${project.version}</tag>
            </configuration>
          </execution>

          <execution>
            <id>docker-evolutionengine</id>
            <goals>
              <goal>build</goal>
              <goal>push</goal>
            </goals>
            <configuration>
              <skip>${common.build.skip.docker-evolutionengine-image}</skip>
              <contextDirectory>${project.build.directory}/assembled-docker/evolutionengine</contextDirectory>
              <repository>${env.DOCKER_REGISTRY}ev-evolutionengine</repository>
              <classifier>docker-info-evolutionengine</classifier>
              <tag>${project.name}-${project.version}</tag>
            </configuration>
          </execution>

          <execution>
            <id>docker-journeytrafficengine</id>
            <goals>
              <goal>build</goal>
              <goal>push</goal>
            </goals>
            <configuration>
              <skip>${common.build.skip.docker-journeytrafficengine-image}</skip>
              <contextDirectory>${project.build.directory}/assembled-docker/journeytrafficengine</contextDirectory>
              <repository>${env.DOCKER_REGISTRY}ev-journeytrafficengine</repository>
              <classifier>docker-info-journeytrafficengine</classifier>
              <tag>${project.name}-${project.version}</tag>
            </configuration>
          </execution>

          <execution>
            <id>docker-propensityengine</id>
            <goals>
              <goal>build</goal>
              <goal>push</goal>
            </goals>
            <configuration>
              <skip>${common.build.skip.docker-propensityengine-image}</skip>
              <contextDirectory>${project.build.directory}/assembled-docker/propensityengine</contextDirectory>
              <repository>${env.DOCKER_REGISTRY}ev-propensityengine</repository>
              <classifier>docker-info-propensityengine</classifier>
              <tag>${project.name}-${project.version}</tag>
            </configuration>
          </execution>

          <execution>
            <id>docker-subscribergroup</id>
            <goals>
              <goal>build</goal>
              <goal>push</goal>
            </goals>
            <configuration>
              <skip>${common.build.skip.docker-subscribergroup-image}</skip>
              <contextDirectory>${project.build.directory}/assembled-docker/subscribergroup</contextDirectory>
              <repository>${env.DOCKER_REGISTRY}ev-subscribergroup</repository>
              <classifier>docker-info-subscribergroup</classifier>
              <tag>${project.name}-${project.version}</tag>
            </configuration>
          </execution>

          <execution>
            <id>docker-storeconfiguration</id>
            <goals>
              <goal>build</goal>
              <goal>push</goal>
            </goals>
            <configuration>
              <skip>${common.build.skip.docker-storeconfiguration-image}</skip>
              <contextDirectory>${project.build.directory}/assembled-docker/storeconfiguration</contextDirectory>
              <repository>${env.DOCKER_REGISTRY}ev-storeconfiguration</repository>
              <classifier>docker-info-storeconfiguration</classifier>
              <tag>${project.name}-${project.version}</tag>
            </configuration>
          </execution>

          <execution>
            <id>docker-ucgengine</id>
            <goals>
              <goal>build</goal>
              <goal>push</goal>
            </goals>
            <configuration>
              <skip>${common.build.skip.docker-ucgengine-image}</skip>
              <contextDirectory>${project.build.directory}/assembled-docker/ucgengine</contextDirectory>
              <repository>${env.DOCKER_REGISTRY}ev-ucgengine</repository>
              <classifier>docker-info-ucgengine</classifier>
              <tag>${project.name}-${project.version}</tag>
            </configuration>
          </execution>

          <execution>
            <id>docker-infulfillmentmanager</id>
            <goals>
              <goal>build</goal>
              <goal>push</goal>
            </goals>
            <configuration>
              <skip>${common.build.skip.docker-infulfillmentmanager-image}</skip>
              <contextDirectory>${project.build.directory}/assembled-docker/infulfillmentmanager</contextDirectory>
              <repository>${env.DOCKER_REGISTRY}ev-infulfillmentmanager</repository>
              <classifier>docker-info-infulfillmentmanager</classifier>
              <tag>${project.name}-${project.version}</tag>
            </configuration>
          </execution>

          <execution>
            <id>docker-emptyfulfillmentmanager</id>
            <goals>
              <goal>build</goal>
              <goal>push</goal>
            </goals>
            <configuration>
              <skip>${common.build.skip.docker-emptyfulfillmentmanager-image}</skip>
              <contextDirectory>${project.build.directory}/assembled-docker/emptyfulfillmentmanager</contextDirectory>
              <repository>${env.DOCKER_REGISTRY}ev-emptyfulfillmentmanager</repository>
              <classifier>docker-info-emptyfulfillmentmanager</classifier>
              <tag>${project.name}-${project.version}</tag>
            </configuration>
          </execution>

          <execution>
            <id>docker-commoditydeliverymanager</id>
            <goals>
              <goal>build</goal>
              <goal>push</goal>
            </goals>
            <configuration>
              <skip>${common.build.skip.docker-commoditydeliverymanager-image}</skip>
              <contextDirectory>${project.build.directory}/assembled-docker/commoditydeliverymanager</contextDirectory>
              <repository>${env.DOCKER_REGISTRY}ev-commoditydeliverymanager</repository>
              <classifier>docker-info-commoditydeliverymanager</classifier>
              <tag>${project.name}-${project.version}</tag>
            </configuration>
          </execution>

          <execution>
            <id>docker-purchasefulfillmentmanager</id>
            <goals>
              <goal>build</goal>
              <goal>push</goal>
            </goals>
            <configuration>
              <skip>${common.build.skip.docker-purchasefulfillmentmanager-image}</skip>
              <contextDirectory>${project.build.directory}/assembled-docker/purchasefulfillmentmanager</contextDirectory>
              <repository>${env.DOCKER_REGISTRY}ev-purchasefulfillmentmanager</repository>
              <classifier>docker-info-purchasefulfillmentmanager</classifier>
              <tag>${project.name}-${project.version}</tag>
            </configuration>
          </execution>

          <execution>
            <id>docker-notificationmanagersms</id>
            <goals>
              <goal>build</goal>
              <goal>push</goal>
            </goals>
            <configuration>
              <skip>${common.build.skip.docker-notificationmanagersms-image}</skip>
              <contextDirectory>${project.build.directory}/assembled-docker/notificationmanagersms</contextDirectory>
              <repository>${env.DOCKER_REGISTRY}ev-notificationmanagersms</repository>
              <classifier>docker-info-notificationmanagersms</classifier>
              <tag>${project.name}-${project.version}</tag>
            </configuration>
          </execution>

          <execution>
            <id>docker-notificationmanagermail</id>
            <goals>
              <goal>build</goal>
              <goal>push</goal>
            </goals>
            <configuration>
              <skip>${common.build.skip.docker-notificationmanagermail-image}</skip>
              <contextDirectory>${project.build.directory}/assembled-docker/notificationmanagermail</contextDirectory>
              <repository>${env.DOCKER_REGISTRY}ev-notificationmanagermail</repository>
              <classifier>docker-info-notificationmanagermail</classifier>
              <tag>${project.name}-${project.version}</tag>
            </configuration>
          </execution>

          <execution>
            <id>docker-notificationmanagerpush</id>
            <goals>
              <goal>build</goal>
              <goal>push</goal>
            </goals>
            <configuration>
              <skip>${common.build.skip.docker-notificationmanagerpush-image}</skip>
              <contextDirectory>${project.build.directory}/assembled-docker/notificationmanagerpush</contextDirectory>
              <repository>${env.DOCKER_REGISTRY}ev-notificationmanagerpush</repository>
              <classifier>docker-info-notificationmanagerpush</classifier>
              <tag>${project.name}-${project.version}</tag>
            </configuration>
          </execution>

          <execution>
            <id>docker-reportmanager</id>
            <goals>
              <goal>build</goal>
              <goal>push</goal>
            </goals>
            <configuration>
              <skip>${common.build.skip.docker-reportmanager-image}</skip>
              <contextDirectory>${project.build.directory}/assembled-docker/reportmanager</contextDirectory>
              <repository>${env.DOCKER_REGISTRY}ev-reportmanager</repository>
              <classifier>docker-info-reportmanager</classifier>
              <tag>${project.name}-${project.version}</tag>
            </configuration>
          </execution>

          <execution>
            <id>docker-reportscheduler</id>
            <goals>
              <goal>build</goal>
              <goal>push</goal>
            </goals>
            <configuration>
              <skip>${common.build.skip.docker-reportscheduler-image}</skip>
              <contextDirectory>${project.build.directory}/assembled-docker/reportscheduler</contextDirectory>
              <repository>${env.DOCKER_REGISTRY}ev-reportscheduler</repository>
              <classifier>docker-info-reportscheduler</classifier>
              <tag>${project.name}-${project.version}</tag>
            </configuration>
          </execution>

          <execution>
            <id>docker-datacubemanager</id>
            <goals>
              <goal>build</goal>
              <goal>push</goal>
            </goals>
            <configuration>
              <skip>${common.build.skip.docker-datacubemanager-image}</skip>
              <contextDirectory>${project.build.directory}/assembled-docker/datacubemanager</contextDirectory>
              <repository>${env.DOCKER_REGISTRY}ev-datacubemanager</repository>
              <classifier>docker-info-datacubemanager</classifier>
              <tag>${project.name}-${project.version}</tag>
            </configuration>
          </execution>

          <execution>
            <id>docker-upgrade</id>
            <goals>
              <goal>build</goal>
              <goal>push</goal>
            </goals>
            <configuration>
              <skip>${common.build.skip.docker-upgrade-image}</skip>
              <contextDirectory>${project.build.directory}/assembled-docker/upgrade</contextDirectory>
              <repository>${env.DOCKER_REGISTRY}ev-upgrade</repository>
              <classifier>docker-info-upgrade</classifier>
              <tag>${project.name}-${project.version}</tag>
            </configuration>
          </execution>

        </executions>
      </plugin>
      
    </plugins>

  </build>

  <distributionManagement>

    <repository>
      <id>evolving-internal</id>
      <name>Evolving Internal Repository</name>
      <url>http://10.100.0.6:8090/artifactory/evolving-internal</url>
    </repository>
    
    <snapshotRepository>
      <id>evolving-snapshots</id>
      <name>Evolving Snapshots Repository</name>
      <url>http://10.100.0.6:8090/artifactory/evolving-snapshots</url>
    </snapshotRepository>
 
  </distributionManagement>
  
</project>
